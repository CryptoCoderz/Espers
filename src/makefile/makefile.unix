# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0
USE_WALLET:=1

LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

DEFS=-DBOOST_SPIRIT_THREADSAFE

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l boost_chrono$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif


# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter -std=c++11 \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

OBJS= \
    leveldb/libleveldb.a \
    obj/node/alert.o \
    obj/consensus/version.o \
    obj/consensus/checkpoints.o \
    obj/node/netbase.o \
    obj/node/addrman.o \
    obj/subcore/crypter.o \
    obj/subcore/key.o \
    obj/util/init.o \
    obj/daemon/bitcoind.o \
    obj/subcore/keystore.o \
    obj/core/chain.o \
    obj/core/main.o \
    obj/node/net.o \
    obj/subcore/protocol.o \
    obj/consensus/velocity.o \
    obj/rpc/rpcvelocity.o \
    obj/rpc/rpcclient.o \
    obj/rpc/rpcprotocol.o \
    obj/rpc/rpcserver.o \
    obj/rpc/rpcmisc.o \
    obj/rpc/rpcnet.o \
    obj/rpc/rpcblockchain.o \
    obj/rpc/rpcrawtransaction.o \
    obj/xnode/xnoderpc.o \
    obj/subcore/timedata.o \
    obj/subcore/script.o \
    obj/core/sync.o \
    obj/subcore/txmempool.o \
    obj/core/blocksizecalculator.o \
    obj/util/util.o \
    obj/subcore/hash.o \
    obj/subcore/noui.o \
    obj/consensus/kernel.o \
    obj/primitives/pbkdf2.o \
    obj/consensus/fork.o \
    obj/crypto/scrypt/scrypt.o \
    obj/crypto/scrypt/scrypt-arm.o \
    obj/crypto/scrypt/scrypt-x86.o \
    obj/crypto/scrypt/scrypt-x86_64.o \
    obj/core/chainparams.o \
    obj/core/blockparams.o \
    obj/crypto/common/blake.o\
    obj/crypto/common/bmw.o\
    obj/crypto/common/groestl.o\
    obj/crypto/common/jh.o\
    obj/crypto/common/keccak.o\
    obj/crypto/common/skein.o\
    obj/crypto/common/cubehash.o \
    obj/crypto/common/luffa.o \
    obj/crypto/common/aes_helper.o \
    obj/crypto/common/echo.o \
    obj/crypto/common/shavite.o \
    obj/crypto/common/simd.o \
    obj/crypto/common/hamsi.o \
    obj/crypto/common/fugue.o \
    obj/crypto/common/shabal.o \
    obj/crypto/common/whirlpool.o \
    obj/crypto/common/haval.o \
    obj/crypto/common/sha2big.o \
    obj/xnode/xnodecomponent.o \
    obj/xnode/xnodemngr.o \
    obj/xnode/xnodereward.o \
    obj/xnode/xnodesettings.o \
    obj/xnode/xnodestart.o \
    obj/xnode/xnodesync.o \
    obj/xnode/xnodecrypter.o \
    obj/deminode/demimodule.o \
    obj/deminode/deminet.o \
    obj/deminode/demisync.o \
    obj/fractal/fractalcontract.o \
    obj/fractal/fractaldataob.o \
    obj/fractal/fractalengine.o \
    obj/fractal/fractalnftbase.o \
    obj/fractal/fractalnft.o \
    obj/fractal/fractalparams.o \
    obj/rpc/rpcpasengine.o \
    obj/pas/pas.o \
    obj/pas/pasengine.o \
    obj/pas/pasman.o \
    obj/pas/pasconf.o \
    obj/pas/pasregister.o

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
        obj/database/db.o \
        obj/consensus/miner.o \
        obj/rpc/rpcdump.o \
        obj/rpc/rpcmining.o \
        obj/rpc/rpcwallet.o \
        obj/core/wallet.o \
        obj/database/walletdb.o
endif

all: Espersd

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/database/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..;
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../tools/genbuild.sh obj/build.h
consensus/version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/crypto/scrypt/scrypt-x86.o: crypto/scrypt/scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/crypto/scrypt/scrypt-x86_64.o: crypto/scrypt/scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/crypto/scrypt/scrypt-arm.o: crypto/scrypt/scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.c
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

Espersd: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f Espersd
	-rm -f obj/**/*.o
	-rm -f obj/**/*.P
	-rm -f obj/build.h

FORCE:
